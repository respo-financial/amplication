# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input Credentials {
  password: String!
  username: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

input JsonFilter {
  equals: JSONObject
  not: JSONObject
}

type MetaQueryPayload {
  count: Float!
}

type Mutation {
  createPlugin(data: PluginCreateInput!): Plugin!
  createPluginVersion(data: PluginVersionCreateInput!): PluginVersion!
  createUser(data: UserCreateInput!): User!
  deletePlugin(where: PluginWhereUniqueInput!): Plugin!
  deletePluginVersion(where: PluginVersionWhereUniqueInput!): PluginVersion!
  deleteUser(where: UserWhereUniqueInput!): User!
  login(credentials: Credentials!): UserInfo!
  processPluginCatalog: [Plugin!]
  updatePlugin(
    data: PluginUpdateInput!
    where: PluginWhereUniqueInput!
  ): Plugin!
  updatePluginVersion(
    data: PluginVersionUpdateInput!
    where: PluginVersionWhereUniqueInput!
  ): PluginVersion!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

type Plugin {
  createdAt: DateTime!
  description: String
  github: String
  icon: String
  id: String!
  name: String
  npm: String
  pluginId: String
  updatedAt: DateTime!
  versions(
    orderBy: [PluginVersionOrderByInput!]
    skip: Float
    take: Float
    where: PluginVersionWhereInput
  ): [PluginVersion!]
  website: String
}

input PluginCreateInput {
  description: String
  github: String
  icon: String
  name: String
  npm: String
  pluginId: String
  website: String
}

input PluginOrderByInput {
  createdAt: SortOrder
  description: SortOrder
  github: SortOrder
  icon: SortOrder
  id: SortOrder
  name: SortOrder
  npm: SortOrder
  pluginId: SortOrder
  updatedAt: SortOrder
  website: SortOrder
}

input PluginUpdateInput {
  description: String
  github: String
  icon: String
  name: String
  npm: String
  pluginId: String
  website: String
}

type PluginVersion {
  createdAt: DateTime!
  deprecated: String
  id: String!
  pluginId: String
  pluginIdVersion: String!
  settings: JSON
  updatedAt: DateTime!
  version: String
}

input PluginVersionCreateInput {
  deprecated: String
  pluginId: String
  pluginIdVersion: String!
  settings: JSON
  version: String
}

input PluginVersionOrderByInput {
  createdAt: SortOrder
  deprecated: SortOrder
  id: SortOrder
  pluginId: SortOrder
  pluginIdVersion: SortOrder
  settings: SortOrder
  updatedAt: SortOrder
  version: SortOrder
}

input PluginVersionUpdateInput {
  deprecated: String
  pluginId: String
  pluginIdVersion: String
  settings: JSON
  version: String
}

input PluginVersionWhereInput {
  deprecated: StringNullableFilter
  id: StringFilter
  pluginId: StringNullableFilter
  pluginIdVersion: StringFilter
  settings: JsonFilter
  version: StringNullableFilter
}

input PluginVersionWhereUniqueInput {
  id: String!
}

input PluginWhereInput {
  description: StringNullableFilter
  github: StringNullableFilter
  icon: StringNullableFilter
  id: StringFilter
  name: StringNullableFilter
  npm: StringNullableFilter
  pluginId: StringNullableFilter
  website: StringNullableFilter
}

input PluginWhereUniqueInput {
  id: String!
}

type Query {
  _pluginVersionsMeta(
    orderBy: [PluginVersionOrderByInput!]
    skip: Float
    take: Float
    where: PluginVersionWhereInput
  ): MetaQueryPayload!
  _pluginsMeta(
    orderBy: [PluginOrderByInput!]
    skip: Float
    take: Float
    where: PluginWhereInput
  ): MetaQueryPayload!
  _usersMeta(
    orderBy: [UserOrderByInput!]
    skip: Float
    take: Float
    where: UserWhereInput
  ): MetaQueryPayload!
  plugin(where: PluginWhereUniqueInput!): Plugin
  pluginVersion(where: PluginVersionWhereUniqueInput!): PluginVersion
  pluginVersions(
    orderBy: [PluginVersionOrderByInput!]
    skip: Float
    take: Float
    where: PluginVersionWhereInput
  ): [PluginVersion!]!
  plugins(
    orderBy: [PluginOrderByInput!]
    skip: Float
    take: Float
    where: PluginWhereInput
  ): [Plugin!]!
  user(where: UserWhereUniqueInput!): User
  userInfo: UserInfo!
  users(
    orderBy: [UserOrderByInput!]
    skip: Float
    take: Float
    where: UserWhereInput
  ): [User!]!
}

enum QueryMode {
  Default
  Insensitive
}

enum SortOrder {
  Asc
  Desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

type User {
  createdAt: DateTime!
  firstName: String
  id: String!
  lastName: String
  roles: JSON!
  updatedAt: DateTime!
  username: String!
}

input UserCreateInput {
  firstName: String
  lastName: String
  password: String!
  roles: JSON!
  username: String!
}

type UserInfo {
  accessToken: String
  id: String!
  roles: [String!]!
  username: String!
}

input UserOrderByInput {
  createdAt: SortOrder
  firstName: SortOrder
  id: SortOrder
  lastName: SortOrder
  password: SortOrder
  roles: SortOrder
  updatedAt: SortOrder
  username: SortOrder
}

input UserUpdateInput {
  firstName: String
  lastName: String
  password: String
  roles: JSON
  username: String
}

input UserWhereInput {
  firstName: StringNullableFilter
  id: StringFilter
  lastName: StringNullableFilter
  username: StringFilter
}

input UserWhereUniqueInput {
  id: String!
}
